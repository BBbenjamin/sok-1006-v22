import matplotlib.pyplot as plt
import pandas as pd
import sympy as sp
import numpy as np
from sympy.solvers import solve
sp.init_printing()

#programmere inn funksjonene (14). (15) og (16)

def demand_curve(c,Q,y,pb):
    #Programmer ligning 14 her. Bruk c.log() for å regne ut logaritmen.
    demand = (c.log(Q) - (-4.507 + 0.841*y + 0.2775*pb)) / (-0.397)
    return demand
    
    
def supply_curve_long_run(c,Q,N,X,pf,t):
    #Programmer ligning 15 her. Bruk c.log() for å regne ut logaritmen.
    supply =((1-0.631)*c.log(N*Q+X) - (2.03 - 0.146*pf + 0.0184*t)) / 0.221
    return supply



def supply_curve_short_run(c,Q,N,X,pf,t,Q_fitted):
    #Programmer ligning 16 her. Bruk c.log() for å regne ut logaritmen.
	#TIPS: qprod i ligningen er (N*Q_fitted+X) her. 
    supply = (c.log(N*Q+X) - (2.03-0.146*pf+0.0184*t+0.631*c.log(N*Q_fitted+X))) / 0.221
    return supply



demand_curve(np,2,3,4)

supply_curve_short_run(np,2,3,4,5,6,7)

def equate_q(y,pb,N,X,pf,t):
    #Finn verdien for Q som gør at demand_curve og supply_curve_long_run returnerer samme verdi. 
    #Bruk sp.Eq, og la første argument i funksjonene over være sp
    Q = sp.Symbol('Q')
    eq = sp.Eq(demand_curve(sp,Q,y,pb), supply_curve_long_run(sp,Q,N,X,pf,t))
    sol = sp.nsolve(eq, 40)
    return float(sol)
    
    def plot_year(df,year):
    


    #obtaining the relevant variables for year:
    d=df[df['YEAR']==year].to_dict(orient='records')[0]
    
    cpi=d['CPI']
    y=np.log(d['Y'])
    pb=np.log(d['PBEEF']/cpi)
    N=d['POP']
    X=d['QPRODA']/1439-d['Q']*d['POP']
    pf=np.log(d['PF']/cpi)
    t=d['TIME']
    
    
    #obtaining equilibrium quantity:
    Q_fitted=equate_q(y,pb,N,X,pf,t)

 #plotting the functions:
    
    #plot alle tre funksjonene her. 
    #Husk at 
    #1. funksjonene skal opphøyes i eksponenten (dvs. du bruker np.exp(<funksjon>)) for å uttrykkes i nivå
    #2. så skal de multipliseres med cpi
    #3. første argument er np her, ikke sp. 
    Q=np.linspace(0.1,100,100)
    plt.plot(Q, np.exp(demand_curve(np,Q,y,pb))*cpi)
    plt.plot(Q, np.exp(supply_curve_long_run(np,Q,N,X,pf,t))*cpi)
    plt.plot(Q, np.exp(supply_curve_short_run(np,Q,N,X,pf,t,Q_fitted))*cpi)
    plt.ylim(0,400)

    
    plt.show()
    
    #Oppgave#5
df=pd.read_csv("https://uit-sok-1006-v22.github.io/innleveringer/chickendata.csv",delimiter=";")
plot_year(df,1995)

#Oppgave#6
df=pd.read_csv("https://uit-sok-1006-v22.github.io/innleveringer/chickendata.csv",delimiter=";")
plot_year(df,1960)
df=pd.read_csv("https://uit-sok-1006-v22.github.io/innleveringer/chickendata.csv",delimiter=";")
plot_year(df,1995)

#forklaring oppgave 6

#Fra figur to ser vi at skiftet utover innen supply er større enn skiftet innover for 
#demand noe som førte til et fall på prisen for kylling innen tidsperioden 1965-1995.
#utslaget innen demand fra 1960-1995 er grunnet vekst innen realkapital på noe rundt 225%
#i løpet av tidsperioden. og i løpet av perioden økte prisen med røffelig 25%.

#Oppgave 7
def plot_year(df,year):
    


    #obtaining the relevant variables for year:
    d=df[df['YEAR']==year].to_dict(orient='records')[0]
    
    cpi=d['CPI']
    y=np.log(d['Y'])
    pb=np.log(d['PBEEF']/cpi)
    N=d['POP']
    X=d['QPRODA']/1439-d['Q']*d['POP']
    pf=np.log(d['PF']/cpi)
    t=d['TIME']
    
    
    #obtaining equilibrium quantity:
    Q_fitted=equate_q(y,pb,N,X,pf,t)

 #plotting the functions:
    
    #plot alle tre funksjonene her. 
    #Husk at 
    #1. funksjonene skal opphøyes i eksponenten (dvs. du bruker np.exp(<funksjon>)) for å uttrykkes i nivå
    #2. så skal de multipliseres med cpi
    #3. første argument er np her, ikke sp. 
    Q=np.linspace(0.1,100,100)
    plt.plot(Q, np.exp(demand_curve(np,Q,y,pb))*cpi)
    plt.plot(Q, np.exp(supply_curve_long_run(np,Q,N,X,pf,t))*cpi)
    plt.plot(Q, np.exp(supply_curve_short_run(np,Q,N,X,pf,t,Q_fitted))*cpi)
    plt.plot(Q, np.exp(demand_curve(np,Q+0.5,y,pb))*cpi)
    plt.plot(Q, np.exp(demand_curve(np,Q,y+0.5,pb))*cpi)
    plt.plot(Q, np.exp(demand_curve(np,Q,y,pb+0.5))*cpi)
    plt.ylim(0,400)

    
    plt.show()
    
    plot_year(df,1995)
    
 #scenarioer som kan være grunnen til slike endringer kan være endring av pris. 
#endring av pris av for hos storfe kan sette opp prisen på kyret som igjen gjør det til et 
#rivaliserende gode. Dette kan føre til mer konsum av kylling og andre kjøttprodukter.






